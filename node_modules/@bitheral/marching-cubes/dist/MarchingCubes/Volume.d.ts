import Cube from "./Cube";
import { Vector3, BufferGeometry, Mesh } from "three";
import { Noise, NoiseData } from "../Noise";
export interface VolumeNeighbours {
    front: VolumeNew | Volume | null;
    back: VolumeNew | Volume | null;
    left: VolumeNew | Volume | null;
    right: VolumeNew | Volume | null;
    frontLeft: VolumeNew | Volume | null;
    frontRight: VolumeNew | Volume | null;
    backLeft: VolumeNew | Volume | null;
    backRight: VolumeNew | Volume | null;
}
export declare class Volume {
    size: number;
    cubeGrid: Cube[];
    wireframeCube: BufferGeometry;
    wireframeMesh: Mesh | undefined;
    position: Vector3;
    geometry: BufferGeometry;
    showEdges: boolean;
    edgeSharpness: number;
    show: boolean;
    noiseOffset: Vector3;
    noiseScale: number;
    densityThreshold: number;
    yBias: number;
    gridWireframe: boolean;
    wireFrame: boolean;
    seed: number;
    noiseSeed: number;
    pNoiseSeed: any;
    ySize: number;
    noise: any;
    static createSeed(_seed: number): any;
    constructor(size: number, position: Vector3);
    private generateGrid;
    enableWireFrame(scene: THREE.Scene): void;
    update(key: string): void;
    March(updateValues?: boolean): BufferGeometry[];
    mergeGeometries(geometries: THREE.BufferGeometry[]): THREE.BufferGeometry;
    static mergeGeometries(geometries: THREE.BufferGeometry[]): THREE.BufferGeometry;
    getPosition(): Vector3;
    getDensityThreshold(): number;
    getNoiseScale(): number;
    getScale(): number;
    getNoiseOffset(): Vector3;
    getGeometry(): BufferGeometry;
    isShowingEdges(): boolean;
    isWireFrame(): boolean;
}
export declare class VolumeNew {
    private static cubeCorners;
    size: number;
    position: Vector3;
    vertices: number[];
    uvs: number[];
    densities: number[];
    geometry: BufferGeometry;
    showEdges: boolean;
    edgeSharpness: number;
    show: boolean;
    noiseOffset: Vector3;
    noiseScale: number;
    densityThreshold: number;
    yBias: number;
    seed: number;
    noiseSeed: number;
    pNoiseSeed: any;
    ySize: number;
    customNoise: Noise;
    noiseConfigs: NoiseData[];
    neighbours: VolumeNeighbours;
    noise: any;
    constructor(size: number, position: Vector3, noiseOffset?: Vector3);
    update(key: string): void;
    March(): void;
    getDensityThreshold(): number;
    getHeightmap(scale?: number): {
        point: Vector3;
        normal: Vector3;
    }[];
    getNoiseScale(): number;
    getScale(): number;
    getGeometry(): BufferGeometry;
    isShowingEdges(): boolean;
}
export type VolumeType = Volume;
declare const _default: {
    Volume: typeof Volume;
    VolumeNew: typeof VolumeNew;
    NoiseData: {
        offset: Vector3;
        scale: number;
        octaves: number;
        persistence: number;
        lacunarity: number;
    };
};
export default _default;
